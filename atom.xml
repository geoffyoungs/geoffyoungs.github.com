<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[frafferz/geek]]></title>
  <link href="http://geoffyoungs.github.com/atom.xml" rel="self"/>
  <link href="http://geoffyoungs.github.com/"/>
  <updated>2013-02-08T17:14:28+00:00</updated>
  <id>http://geoffyoungs.github.com/</id>
  <author>
    <name><![CDATA[Geoff Youngs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveRecord::QueryCache and Rack speed]]></title>
    <link href="http://geoffyoungs.github.com/blog/2013/02/08/activerecord-querycache-and-rack-speed/"/>
    <updated>2013-02-08T15:39:00+00:00</updated>
    <id>http://geoffyoungs.github.com/blog/2013/02/08/activerecord-querycache-and-rack-speed</id>
    <content type="html"><![CDATA[<p>Ignore this unless you&#8217;re using a Rack handler and ActiveRecord.</p>

<p>If you&#8217;re using a vanilla rack handler or <a href="https://github.com/intridea/grape">Grape</a> or <a href="https://github.com/geoffyoungs/jsonrpc2">JSONRPC2</a> or something similar that accesses your database via ActiveRecord, and you&#8217;re mounting it directly in Rack
you&#8217;ll probably benefit from using the <a href="http://api.rubyonrails.org/classes/ActiveRecord/QueryCache.html">ActiveRecord::QueryCache</a>.  Unless you&#8217;re going through the rails stack, you don&#8217;t get this for free - you have to ask.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">use</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:QueryCache</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s just a standard piece of Rack Middleware, but it turns on DB
caching for the duration of the request.</p>

<p>e.g.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">map</span> <span class="s1">&#39;/foo/bar&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Logger</span>
</span><span class='line'>  <span class="n">use</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:QueryCache</span> <span class="c1"># &lt;-- this increased the speed of my API calls by ~20%</span>
</span><span class='line'>  <span class="n">run</span> <span class="no">MyRackHandler</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Utils]]></title>
    <link href="http://geoffyoungs.github.com/blog/2012/08/09/ruby-utils/"/>
    <updated>2012-08-09T17:24:00+01:00</updated>
    <id>http://geoffyoungs.github.com/blog/2012/08/09/ruby-utils</id>
    <content type="html"><![CDATA[<p>The <code>#to_proc</code> method is pretty useful - it allows all sorts of
niceness, such as</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span> <span class="c1">#=&gt; [&quot;11&quot;,&quot;12&quot;,&quot;13&quot;]`</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works by calling <code>Symbol#to_proc</code>, which is defined something like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">to_proc</span>
</span><span class='line'>  <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">object</span><span class="o">|</span> <span class="n">object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what about if you want to pass arguments to the function?  Suppose
you wanted to call <code>#to_s(16)</code> on each element in the array?</p>

<p>If you still want the compact formulation, you can add a <code>[]</code> method to the Symbol:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Symbol</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span> <span class="n">o</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>which means that you can use stuff like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="o">[</span><span class="mi">16</span><span class="o">]</span><span class="p">)</span> <span class="c1">#=&gt; [&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]`</span>
</span><span class='line'><span class="o">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:*</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span> <span class="c1">#=&gt; [22, 24, 26]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method in the Madness: Ensure And Return]]></title>
    <link href="http://geoffyoungs.github.com/blog/2011/11/18/ensure-and-return/"/>
    <updated>2011-11-18T10:47:00+00:00</updated>
    <id>http://geoffyoungs.github.com/blog/2011/11/18/ensure-and-return</id>
    <content type="html"><![CDATA[<p>Was pondering the question: what code runs when method level <code>rescue</code>, <code>else</code> and <code>ensure</code> are used in ruby?</p>

<h3>TL;DR summary</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some_method</span>
</span><span class='line'>  <span class="c1"># main body</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="c1"># rescue code</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># alternative to rescue</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="c1"># always run me last</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Without <code>return</code> the last computed value that is not in the <code>ensure</code> block is returned (this will either be the main body, the rescue block or the else block).</li>
<li>Using <code>return</code> in the main body of the method means that <code>else</code> block doesn&#8217;t run.</li>
<li>Using <code>return</code> in an <code>ensure</code> block always overrides any other value returned by the method, regardless of whether any other section of the method also used the <code>return</code> keyword.</li>
<li>Values from an <code>ensure</code> block are only ever returned when the <code>return</code> keyword is used.</li>
</ol>


<h3>Simple function:</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;ran </span><span class="si">#{</span><span class="n">sym</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sym</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fn1</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="ss">:fn1</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="ss">:rescue1</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="ss">:else1</span><span class="p">)</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="ss">:ensure1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fn1</span><span class="p">()</span> <span class="c1">#=&gt; :else1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<pre><code>ran fn1
ran else1
ran ensure1
</code></pre>

<h3>Function with error:</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;ran </span><span class="si">#{</span><span class="n">sym</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sym</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fn2</span>
</span><span class='line'>  <span class="k">raise</span> <span class="n">value</span><span class="p">(</span><span class="ss">:fn2</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="ss">:rescue2</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="ss">:else2</span><span class="p">)</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="ss">:ensure2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fn2</span><span class="p">()</span> <span class="c1">#=&gt; :rescue2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<pre><code>ran fn2
ran rescue2
ran ensure2
</code></pre>

<h3>Function with return in main body</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;ran </span><span class="si">#{</span><span class="n">sym</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sym</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fn3</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">(</span><span class="ss">:fn3</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="ss">:rescue3</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="ss">:else3</span><span class="p">)</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="ss">:ensure3</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fn3</span><span class="p">()</span> <span class="c1">#=&gt; :fn3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<pre><code>ran fn3
ran ensure3
</code></pre>

<h3>Function with return in main body and return in ensure block</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;ran </span><span class="si">#{</span><span class="n">sym</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sym</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fn4</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">(</span><span class="ss">:fn4</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">(</span><span class="ss">:rescue4</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">(</span><span class="ss">:else4</span><span class="p">)</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">(</span><span class="ss">:ensure4</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fn4</span><span class="p">()</span> <span class="c1">#=&gt; :ensure4</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<pre><code>ran fn4
ran ensure4
</code></pre>

<h3>Function with return in main body and in ensure and error raised</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;ran </span><span class="si">#{</span><span class="n">sym</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sym</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fn5</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">raise</span> <span class="n">value</span><span class="p">(</span><span class="ss">:fn5</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">(</span><span class="ss">:rescue5</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">(</span><span class="ss">:else5</span><span class="p">)</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">(</span><span class="ss">:ensure5</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fn5</span><span class="p">()</span> <span class="c1">#=&gt; :ensure5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<pre><code>ran fn5
ran rescue5
ran ensure5
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passenger Standalone on Ubuntu 11.10 (Oneiric Ocelot)]]></title>
    <link href="http://geoffyoungs.github.com/blog/2011/09/27/passenger-standalone-on-ubuntu-11-dot-10-oneiric/"/>
    <updated>2011-09-27T09:51:00+01:00</updated>
    <id>http://geoffyoungs.github.com/blog/2011/09/27/passenger-standalone-on-ubuntu-11-dot-10-oneiric</id>
    <content type="html"><![CDATA[<p>Until <a href="http://code.google.com/p/phusion-passenger/issues/detail?id=704">issue 704</a> is resolved, <a href="http://www.modrails.com/">Passenger Standalone</a> won&#8217;t compile properly on Ubuntu 11.10 (Oneirc Ocelot - currently pre-release) using the default settings.</p>

<p>To work around this, use GCC 4.4 instead.  You&#8217;ll need to install <code>gcc-4.4</code> and <code>libstdc++6-4.4-dev</code> and then specify GCC 4.4 at compile time using the CC environment variable.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install gcc-4.4 libstdc++6-4.4-dev
</span><span class='line'><span class="nv">$ CC</span><span class="o">=</span>gcc-4.4 passenger start
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully this will help anyone else who&#8217;s updated to the latest Ubuntu pre-release and still wants to use Passenger Standalone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Zip - Russian Dolls]]></title>
    <link href="http://geoffyoungs.github.com/blog/2011/09/20/playing-with-zip-russian-dolls/"/>
    <updated>2011-09-20T20:16:00+01:00</updated>
    <id>http://geoffyoungs.github.com/blog/2011/09/20/playing-with-zip-russian-dolls</id>
    <content type="html"><![CDATA[<p>The standard answer is that zip files can&#8217;t contain more than one copy of a file without containing more than one copy of a file.  In other words, there&#8217;s not a portable version of a *nix style hard link.</p>

<p>And that&#8217;s kind of true.  However it is theoretically possible to create valid zip files that violate this principle in a platform independant manner.  Unfortunately this doesn&#8217;t work properly with Stuffit :(</p>

<p>The data for a file entry must start immediately following the header, but the header can be upto ~65k and ends with fields that should be ignored if they are not understood.  So we can stuff a local file header inside the end of a parent local file header (and prefix 32 bytes of &#8220;unknown&#8221; extra field) so that we have two valid local file headers that each end immediately before the only copy of the file data, as pictured:</p>

<p><img alt="Stuffing headers inside headers like Russian Dolls" src="http://geoffyoungs.github.com/media/diagram-4ef36d62870790b1334d7a1835e239d7.png" width="410" height="294"></p>

<p>And then we add the entries to Central Directory as if they were normal file entries.</p>

<p>Tests work fine with <a href="http://www.info-zip.org/">Info-ZIP</a>, <a href="http://www.7-zip.org">7-Zip</a> and the Windows built-in zip support.  Unfortunately Stuffit on OS X only appears to recognise the &#8220;normal&#8221; entries (ie. doesn&#8217;t extract the embedded headers).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Zip]]></title>
    <link href="http://geoffyoungs.github.com/blog/2011/09/05/playing-with-zip/"/>
    <updated>2011-09-05T18:36:00+01:00</updated>
    <id>http://geoffyoungs.github.com/blog/2011/09/05/playing-with-zip</id>
    <content type="html"><![CDATA[<p>I wanted to stream zip files with lots of JPEGs in.  Hundreds of JPEGs from digital cameras and, being as they were JPEGs, didn&#8217;t really care about trying to compress them any further.</p>

<ol>
<li>I wanted to create (potentially) huge archives.  So I&#8217;d need something that supported ZIP64 extensions.</li>
<li>I wanted to mix local files and files streamed from internal web servers.</li>
<li>I wanted to create a zip file on the fly, with minimal buffering, to minimize disk and memory requirements.</li>
<li>I wanted to support large numbers of simultaneous downloads.</li>
<li>I also wanted (if possible) to efficiently include the same file more than once in an archive with different filenames.</li>
<li>I wanted to continue to use zip archives.</li>
</ol>


<p>Simples?</p>

<p>If only.</p>

<h3>Streaming ZIP64 support (or lack thereof)</h3>

<p>There are several ruby zip libraries, e.g. <a href="http://rubyzip.sourceforge.net/">rubyzip</a>, <a href="https://bitbucket.org/winebarrel/zip-ruby/wiki/Home">zip-ruby</a> and <a href="https://github.com/javanthropus/archive-zip">archive-zip</a> - but they seem to fall into two camps: pure ruby with no ZIP64 or wrapping a C library (e.g. libzip) but with no obvious way to create a zip file and start streaming it before it&#8217;s complete.</p>

<p>So I indulged my NIH syndrome reflex and wrote <a href="https://github.com/geoffyoungs/zip64writer">zip64writer</a> which streams zip files and can automatically starts using ZIP64 extensions when needed. (I did look at adding ZIP64 support to rubyzip, but I figured fairly quickly that it would be easier to roll a specifically targetted library than adapt it to my needs.)</p>

<p>So writing a zip file to a stream works something like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;zip64/writer&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;output.zip&quot;</span><span class="p">,</span> <span class="s2">&quot;wb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">fp</span><span class="o">|</span>
</span><span class='line'>  <span class="ss">Zip64</span><span class="p">:</span><span class="ss">:ZipWriter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">zip</span><span class="o">|</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;sample.jpg&quot;</span><span class="p">,</span> <span class="s2">&quot;rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">rfp</span><span class="o">|</span>
</span><span class='line'>          <span class="n">zip</span><span class="o">.</span><span class="n">add_entry</span><span class="p">(</span><span class="n">rfp</span><span class="p">,</span>
</span><span class='line'>                  <span class="ss">:mtime</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span>
</span><span class='line'>                  <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;myphoto.jpg&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span> <span class="c1"># Implicit close writes central directory to stream</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ZIP64 extensions are extra header fields, and an extra couple of blocks at the end of the zip file, which allow zip files to contain more than 65,535 entries (the limit of a 16bit integer) &amp; for the zip archives (and the files inside them) to be greater than 4 Gb (the limit of a 32bit integer) in size.</p>

<p><img alt="ASCII Art Diagram" src="http://geoffyoungs.github.com/media/diagram-1b9d6331495747733185d5affed5e57a.png" width="500" height="266"></p>

<p>The writer detects when an offset requires a 64bit integer (ie. offset >4Gb) and automatically starts using ZIP64 extensions - so the files are still as compatible as possible with old zip implementations that don&#8217;t support ZIP64 (e.g. Windows XP shell).</p>

<p>Basic testing reveals that ZIP64 files created this way (ie. a mix of standard encoding and ZIP64 encoding) work fine on Windows 7, OS X 10.5+.  (Also the version of file-roller shipped with Lucid Lynx opens them fine, although the version of zip shipped with Hardy Heron is too old.)</p>
]]></content>
  </entry>
  
</feed>
